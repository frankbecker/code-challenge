# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to IKS

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Also trigger on page_build, as well as release created events
  page_build:
  release:
    types: # This configuration does not affect the page_build event above
      - created

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io  
  IKS_CLUSTER: c3js6g9d02cr6s0bg8r0
  FRONTEND_IMAGE_NAME: iks-test-frontend
  FRONTEND_DEPLOYMENT_NAME: iks-test-frontend
  API_IMAGE_NAME: iks-test-api
  API_DEPLOYMENT_NAME: iks-test-api
  PORT: 3000

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g Default
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login


    # Build the API Docker image
    - name: Build API with Docker
      run: |
        cd ./api
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$API_IMAGE_NAME":"$GITHUB_SHA"-api \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .


    # Test API code
    - name: Test API code
      run: |
        docker run --rm \
          "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$API_IMAGE_NAME":"$GITHUB_SHA"-api \
          npm run test

    # Push the API image to IBM Container Registry
    - name: Push the API image to ICR
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$API_IMAGE_NAME:$GITHUB_SHA-api

    # Deploy the API Docker image to the IKS cluster
    - name: Deploy API to IKS
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        kubectl create deployment $API_DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$API_IMAGE_NAME:$GITHUB_SHA-api --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$API_DEPLOYMENT_NAME
        kubectl create service loadbalancer $API_DEPLOYMENT_NAME --tcp=3000:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        kubectl get services -o wide      

    # Build the FrontEnd Docker image
    - name: Build FrontEnd with Docker
      run: |
        cd ./frontend
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$FRONTEND_IMAGE_NAME":"$GITHUB_SHA"-frontend \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .


    # Test FrontEnd code
    - name: Test FrontEnd code
      run: |
        docker run --rm \
          "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$FRONTEND_IMAGE_NAME":"$GITHUB_SHA"-frontend \
          npm run test:ci

    # Push the FrontEnd image to IBM Container Registry
    - name: Push the FrontEnd image to ICR
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$FRONTEND_IMAGE_NAME:$GITHUB_SHA-frontend

    # Deploy the FrontEnd Docker image to the IKS cluster
    - name: Deploy FrontEnd to IKS
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        kubectl create deployment $FRONTEND_DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$FRONTEND_IMAGE_NAME:$GITHUB_SHA-frontend --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$FRONTEND_DEPLOYMENT_NAME
        kubectl create service loadbalancer $FRONTEND_DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        kubectl get services -o wide  
